<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Base</name>
    </assembly>
    <members>
        <member name="T:Base.Controllers.AuthController">
            <summary>
            Authentication Controller
            </summary>
        </member>
        <member name="M:Base.Controllers.AuthController.#ctor(Base.Services.IAuthServices)">
            <summary>
            Constructor
            </summary>
            <param name="authService"></param>
        </member>
        <member name="M:Base.Controllers.AuthController.Authenticate(TokenRequest)">
            <summary>
            Authenticates the user
            </summary>
            <param name="request">TokenRequest is object with email and password</param>
            <returns>AuthUser</returns>
        </member>
        <member name="M:Base.Controllers.AuthController.Signup(Base.Models.User)">
            <summary>
            Register new user in system
            </summary>
            <param name="userParam">User form</param>
            <returns>User</returns>
        </member>
        <member name="T:Base.Controllers.GenericController`1">
            <summary>
            Generic controller class
            </summary>
            <typeparam name="TEntity">Entities that implement ITrackable</typeparam>
        </member>
        <member name="M:Base.Controllers.GenericController`1.Index">
            <summary>
            List the entity records
            </summary>
            <returns>json array</returns>
        </member>
        <member name="M:Base.Controllers.GenericController`1.Show(System.Int32)">
            <summary>
            Show the entity record by id
            </summary>
            <param name="id">entity id</param>
            <returns></returns>
        </member>
        <member name="M:Base.Controllers.GenericController`1.Store(`0)">
            <summary>
            Store the submitted record
            </summary>
            <param name="entity">Entity sent</param>
            <returns></returns>
        </member>
        <member name="M:Base.Controllers.GenericController`1.Update(System.Int32,`0)">
            <summary>
            Update the entity record with the new content
            </summary>
            <param name="id">entity id</param>
            <param name="entity">Entity sent</param>
            <returns></returns>
        </member>
        <member name="M:Base.Controllers.GenericController`1.Destroy(System.Int32)">
            <summary>
            Destroy the entity record
            </summary>
            <param name="id">entity id</param>
            <returns></returns>
        </member>
        <member name="T:Base.Controllers.UserController">
            <summary>
            Users Controller
            </summary>
        </member>
        <member name="M:Base.Controllers.UserController.#ctor(Base.Repositories.IUserRepository)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Base.Controllers.UserController.Index">
            <summary>
            Get all entity itens
            </summary>
        </member>
        <member name="M:Base.Controllers.UserController.FindByEmail(System.String)">
            <summary>
            Get a specific entity item by email
            </summary>
            <param name="email"></param>
        </member>
        <member name="M:Base.Controllers.UserController.FindByUsername(System.String)">
            <summary>
            Get a specific entity item by username
            </summary>
            <param name="username"></param>
        </member>
        <member name="M:Base.Controllers.UserController.Show(System.Int32)">
            <summary>
            Get a specific entity item
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Base.Controllers.UserController.Store(Base.Models.User)">
            <summary>
            Create a specific entity item
            </summary>
        </member>
        <member name="M:Base.Controllers.UserController.Update(System.Int32,Base.Models.User)">
            <summary>
            Update a specific entity item
            </summary>
            <param name="id">id</param>
            <param name="entity">form body</param>
            <returns></returns>
        </member>
        <member name="M:Base.Controllers.UserController.Destroy(System.Int32)">
            <summary>
            Deletes a specific entity item
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Base.Helpers.Secret">
            <summary>
            Manage secret keys
            </summary>
        </member>
        <member name="M:Base.Helpers.Secret.GenerateHash(System.String)">
            <summary>
            Manager passwords using Blowfish Encryption , compatible with standard PHP encryption
            </summary>
            <param name="text">Text to be encrypted</param>
            <returns></returns>
        </member>
        <member name="M:Base.Helpers.Secret.Validate(System.String,System.String)">
            <summary>
            validates the encrypted key with the decrypted key
            </summary>
            <param name="text">plain text</param>
            <param name="hash">encrypted text</param>
            <returns></returns>
        </member>
        <member name="T:Base.Models.Role">
            <summary>
            Role entity - Permissions rules group
            </summary>
        </member>
        <member name="T:Base.Models.Todo">
            <summary>
            Entity Todo - Tasks to be executed
            </summary>
        </member>
        <member name="T:Base.Models.User">
            <summary>
            User Entity - Users are used to authenticate in the system
            </summary>
        </member>
        <member name="T:TokenRequest">
            <summary>
            Data to be sent for authentication
            </summary>
        </member>
        <member name="T:Core.Models.EmailUserUniqueAttribute">
            <summary>
            Validating if email is unique
            </summary>
        </member>
        <member name="M:Core.Models.EmailUserUniqueAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            validate logic
            </summary>
            <param name="value">Email Text</param>
            <param name="validationContext">Context Validation</param>
            <returns>ValidationResult</returns>
        </member>
        <member name="M:Core.Models.EmailUserUniqueAttribute.GetErrorMessage(System.String)">
            <summary>
            Show Message Error
            </summary>
            <param name="email">Email Text</param>
            <returns></returns>
        </member>
        <member name="T:Core.Models.UsernameUserUniqueAttribute">
            <summary>
            Validating if user name is unique
            </summary>
        </member>
        <member name="M:Core.Models.UsernameUserUniqueAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Validate logic
            </summary>
            <param name="value">User Name Text</param>
            <param name="validationContext">Context Validation</param>
            <returns>ValidationResult</returns>
        </member>
        <member name="M:Core.Models.UsernameUserUniqueAttribute.GetErrorMessage(System.String)">
            <summary>
            Validating if user name is unique
            </summary>
        </member>
    </members>
</doc>
